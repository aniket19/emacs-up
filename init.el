;;; init.el --- Make Emacs useful!
;;; Author: Vedang Manerikar
;;; Created on: 10 Jul 2016
;;; Commentary:

;; This file is a bare minimum configuration file to enable working
;; with Emacs for Helpshift newcomers.

;;; Code:

(require 'package)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/")
             t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/")
             t)

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(defvar hs-package-list
  (append
   (when (eq system-type 'darwin)
     '(exec-path-from-shell ; Emacs plugin for dynamic PATH loading
       ))
   '(better-defaults ; Fixing weird quirks and poor defaults
     company  ; Modular in-buffer completion framework for Emacs
     helm     ; Emacs incremental completion and narrowing framework
     avy      ; Jump to things in Emacs tree-style.
     paredit  ; Minor mode for editing parentheses
     magit    ; It's Magit! An Emacs mode for Git.
     ))
  "List of packages to install on top of default Emacs.")

(dolist (p hs-package-list)
  (when (not (package-installed-p p))
    (package-install p)))

;; Modify the CMD key to be my Meta key
(setq mac-command-modifier 'meta)

;; Set a directory for temporary/state related files.
(defvar dotfiles-dirname
  (file-name-directory (or load-file-name
                           (buffer-file-name)))
  "The directory where this code is running from.
Ideally, this will be ~/.emacs.d.")
(defvar tempfiles-dirname
  (concat dotfiles-dirname "temp-files/")
  "A sub-directory to hold temporary files generated by Emacs.")

;; Create the temp-files folder if necessary.
(make-directory tempfiles-dirname t)

;;; Exec PATH from Shell - Fix Emacs's understanding of the the Path
;;; var on Mac.
(when (and (eq system-type 'darwin)
           (eq window-system 'ns))
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize))

(require 'better-defaults)

;; Move Emacs state into the temp folder we've created.
(setq ido-save-directory-list-file (concat tempfiles-dirname "ido.last")
      recentf-save-file (concat tempfiles-dirname "recentf")
      save-place-file (concat tempfiles-dirname "places")
      backup-directory-alist `(("." . ,(concat tempfiles-dirname "backups"))))

;;; Interactively Do Things
;; basic ido settings
(require 'ido)

(ido-mode t)
(ido-everywhere)
(setq ido-enable-flex-matching t
      ido-use-virtual-buffers t
      ido-create-new-buffer 'always
      ido-use-filename-at-point t)
(add-hook 'ido-make-buffer-list-hook 'ido-summary-buffers-to-end)

;; Ido power user settings
(defadvice completing-read
    (around ido-steroids activate)
  "IDO on steroids :D from EmacsWiki."
  (if (boundp 'ido-cur-list)
      ad-do-it
    (setq ad-return-value
          (ido-completing-read
           prompt
           (all-completions "" collection predicate)
           nil require-match initial-input hist def))))

;;; Company - complete anything
(require 'company)
;; Enable company everywhere
(add-hook 'after-init-hook 'global-company-mode)
(setq-default company-lighter " cmp")
(define-key company-active-map [tab] 'company-complete)
(define-key company-active-map (kbd "TAB") 'company-complete)

;;; Helm - Handy completion and narrowing
;; Explicitly turn off global `helm-mode'
(require 'helm-config)
(helm-mode -1)

;; Various useful key-bindings (other than Helm Defaults)
(global-set-key (kbd "C-x c r") nil) ; unset this because I plan to
                                        ; use it as a prefix key.
(global-set-key (kbd "C-x c r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x c r r") 'helm-regexp)
(global-set-key (kbd "C-x c C-b") 'helm-mini)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x c SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
(global-set-key (kbd "C-x c r i") 'helm-register)
;; Useful defaults: C-x c i, C-x c I

;;; Avy
(require 'avy)
(global-set-key (kbd "M-g g") 'avy-goto-line)
(global-set-key (kbd "M-g SPC") 'avy-goto-word-1)
(avy-setup-default)

;;; Paredit
(eval-after-load 'paredit
  '(progn
     ;; `(kbd "M-s")' is a prefix key for a bunch of search related
     ;; commands by default. I want to retain this.
     (define-key paredit-mode-map (kbd "M-s") nil)))
(add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)

;;; Magit
;; Provide a global keybinding for Magit
(global-set-key (kbd "C-x g") 'magit-status)


(provide 'init)
;;; init.el ends here
